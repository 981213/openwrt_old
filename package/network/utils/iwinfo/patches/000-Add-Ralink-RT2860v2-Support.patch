diff -ruN a/api/mtk.h b/api/mtk.h
--- a/api/mtk.h	1970-01-01 08:00:00.000000000 +0800
+++ b/api/mtk.h	2015-01-22 21:22:29.411734000 +0800
@@ -0,0 +1,62 @@
+#ifndef __MTK_H__
+#define __MTK_H__
+
+#define MAC_ADDR_LENGTH		6
+#define MAX_NUMBER_OF_MAC	32
+typedef unsigned char 	UCHAR;
+typedef char		CHAR;
+typedef unsigned int	UINT32;
+typedef unsigned short	USHORT;
+typedef short		SHORT;
+typedef unsigned long	ULONG;
+
+#if WIRELESS_EXT <= 11
+#ifndef SIOCDEVPRIVATE
+#define SIOCDEVPRIVATE                             	 0x8BE0
+#endif
+#define SIOCIWFIRSTPRIV                                  SIOCDEVPRIVATE
+#endif
+
+#define RTPRIV_IOCTL_GET_MAC_TABLE                       (SIOCIWFIRSTPRIV + 0x0F)
+#define RTPRIV_IOCTL_GET_MAC_TABLE_STRUCT                (SIOCIWFIRSTPRIV + 0x1F)        /* modified by Red@Ralink, 2009/09/30 */
+
+
+/* MIMO Tx parameter, ShortGI, MCS, STBC, etc.  these are fields in TXWI. Don't change this definition!!! */
+typedef union _MACHTTRANSMIT_SETTING {
+        struct {
+                USHORT MCS:7;   /* MCS */
+                USHORT BW:1;    /*channel bandwidth 20MHz or 40 MHz */
+                USHORT ShortGI:1;
+                USHORT STBC:2;  /*SPACE */
+                USHORT rsv:3;
+                USHORT MODE:2;  /* Use definition MODE_xxx. */
+        } field;
+        USHORT word;
+} MACHTTRANSMIT_SETTING, *PMACHTTRANSMIT_SETTING;
+
+typedef struct _RT_802_11_MAC_ENTRY {
+        UCHAR ApIdx;
+        UCHAR Addr[MAC_ADDR_LENGTH];
+        UCHAR Aid;
+        UCHAR Psm;              /* 0:PWR_ACTIVE, 1:PWR_SAVE */
+        UCHAR MimoPs;           /* 0:MMPS_STATIC, 1:MMPS_DYNAMIC, 3:MMPS_Enabled */
+        CHAR AvgRssi0;
+        CHAR AvgRssi1;
+        CHAR AvgRssi2;
+        UINT32 ConnectedTime;
+        MACHTTRANSMIT_SETTING TxRate;
+        UINT32          LastRxRate;
+        SHORT           StreamSnr[3];                           /* BF SNR from RXWI. Units=0.25 dB. 22 dB offset removed */
+        SHORT           SoundingRespSnr[3];                     /* SNR from Sounding Response. Units=0.25 dB. 22 dB offset removed */
+/*      SHORT           TxPER;  */                                      /* TX PER over the last second. Percent */
+/*      SHORT           reserved;*/
+} RT_802_11_MAC_ENTRY, *PRT_802_11_MAC_ENTRY;
+
+typedef struct _RT_802_11_MAC_TABLE {
+        ULONG Num;
+        RT_802_11_MAC_ENTRY Entry[MAX_NUMBER_OF_MAC];
+} RT_802_11_MAC_TABLE, *PRT_802_11_MAC_TABLE;
+
+
+#endif // __MTK_H__
+
diff -ruN a/include/iwinfo/lua.h b/include/iwinfo/lua.h
--- a/include/iwinfo/lua.h	2015-01-11 11:53:32.000000000 +0800
+++ b/include/iwinfo/lua.h	2015-01-23 13:18:24.210275000 +0800
@@ -41,6 +41,9 @@
 #define IWINFO_NL80211_META	"iwinfo.nl80211"
 #endif
 
+#ifdef USE_RT2860V2
+#define IWINFO_RT2860V2_META		"iwinfo.rt2860v2"
+#endif
 
 #define LUA_REG(type,op) \
 	{ #op, iwinfo_L_##type##_##op }
diff -ruN a/include/iwinfo.h b/include/iwinfo.h
--- a/include/iwinfo.h	2015-01-11 11:53:32.000000000 +0800
+++ b/include/iwinfo.h	2015-01-23 13:18:24.209275000 +0800
@@ -190,6 +190,7 @@
 extern const struct iwinfo_ops madwifi_ops;
 extern const struct iwinfo_ops nl80211_ops;
 extern const struct iwinfo_ops wl_ops;
+extern const struct iwinfo_ops rt2860v2_ops;
 
 #include "iwinfo/utils.h"
 
diff -ruN a/iwinfo_lib.c b/iwinfo_lib.c
--- a/iwinfo_lib.c	2015-01-11 11:53:32.000000000 +0800
+++ b/iwinfo_lib.c	2015-01-23 13:18:24.210275000 +0800
@@ -327,6 +327,9 @@
 #ifdef USE_WL
 	&wl_ops,
 #endif
+#ifdef USE_RT2860V2
+	&rt2860v2_ops,
+#endif
 	&wext_ops,
 };
 
diff -ruN a/iwinfo_lua.c b/iwinfo_lua.c
--- a/iwinfo_lua.c	2015-01-11 11:53:32.000000000 +0800
+++ b/iwinfo_lua.c	2015-01-23 13:18:24.216275000 +0800
@@ -699,6 +699,36 @@
 LUA_WRAP_STRUCT_OP(nl80211,hardware_id)
 #endif
 
+#ifdef USE_RT2860V2
+/* Ralink RT2860V2 */
+LUA_WRAP_INT_OP(rt2860v2,channel)
+LUA_WRAP_INT_OP(rt2860v2,frequency)
+LUA_WRAP_INT_OP(rt2860v2,frequency_offset)
+LUA_WRAP_INT_OP(rt2860v2,txpower)
+LUA_WRAP_INT_OP(rt2860v2,txpower_offset)
+LUA_WRAP_INT_OP(rt2860v2,bitrate)
+LUA_WRAP_INT_OP(rt2860v2,signal)
+LUA_WRAP_INT_OP(rt2860v2,noise)
+LUA_WRAP_INT_OP(rt2860v2,quality)
+LUA_WRAP_INT_OP(rt2860v2,quality_max)
+LUA_WRAP_STRING_OP(rt2860v2,ssid)
+LUA_WRAP_STRING_OP(rt2860v2,bssid)
+LUA_WRAP_STRING_OP(rt2860v2,country)
+LUA_WRAP_STRING_OP(rt2860v2,hardware_name)
+LUA_WRAP_STRING_OP(rt2860v2,phyname)
+LUA_WRAP_STRUCT_OP(rt2860v2,mode)
+LUA_WRAP_STRUCT_OP(rt2860v2,assoclist)
+LUA_WRAP_STRUCT_OP(rt2860v2,txpwrlist)
+LUA_WRAP_STRUCT_OP(rt2860v2,scanlist)
+LUA_WRAP_STRUCT_OP(rt2860v2,freqlist)
+LUA_WRAP_STRUCT_OP(rt2860v2,countrylist)
+LUA_WRAP_STRUCT_OP(rt2860v2,hwmodelist)
+LUA_WRAP_STRUCT_OP(rt2860v2,encryption)
+LUA_WRAP_STRUCT_OP(rt2860v2,mbssid_support)
+LUA_WRAP_STRUCT_OP(rt2860v2,hardware_id)
+#endif
+
+
 /* Wext */
 LUA_WRAP_INT_OP(wext,channel)
 LUA_WRAP_INT_OP(wext,frequency)
@@ -822,6 +852,38 @@
 };
 #endif
 
+#ifdef USE_RT2860V2
+/* Ralink RT2860V2 table */
+static const luaL_reg R_rt2860v2[] = {
+	LUA_REG(rt2860v2,channel),
+	LUA_REG(rt2860v2,frequency),
+	LUA_REG(rt2860v2,frequency_offset),
+	LUA_REG(rt2860v2,txpower),
+	LUA_REG(rt2860v2,txpower_offset),
+	LUA_REG(rt2860v2,bitrate),
+	LUA_REG(rt2860v2,signal),
+	LUA_REG(rt2860v2,noise),
+	LUA_REG(rt2860v2,quality),
+	LUA_REG(rt2860v2,quality_max),
+	LUA_REG(rt2860v2,mode),
+	LUA_REG(rt2860v2,ssid),
+	LUA_REG(rt2860v2,bssid),
+	LUA_REG(rt2860v2,country),
+	LUA_REG(rt2860v2,assoclist),
+	LUA_REG(rt2860v2,txpwrlist),
+	LUA_REG(rt2860v2,scanlist),
+	LUA_REG(rt2860v2,freqlist),
+	LUA_REG(rt2860v2,countrylist),
+	LUA_REG(rt2860v2,hwmodelist),
+	LUA_REG(rt2860v2,encryption),
+	LUA_REG(rt2860v2,mbssid_support),
+	LUA_REG(rt2860v2,hardware_id),
+	LUA_REG(rt2860v2,hardware_name),
+	LUA_REG(rt2860v2,phyname),
+	{ NULL, NULL }
+};
+#endif
+
 /* Wext table */
 static const luaL_reg R_wext[] = {
 	LUA_REG(wext,channel),
@@ -890,6 +952,15 @@
 	lua_setfield(L, -2, "nl80211");
 #endif
 
+#ifdef USE_RT2860V2
+	luaL_newmetatable(L, IWINFO_RT2860V2_META);
+	luaL_register(L, NULL, R_common);
+	luaL_register(L, NULL, R_rt2860v2);
+	lua_pushvalue(L, -1);
+	lua_setfield(L, -2, "__index");
+	lua_setfield(L, -2, "rt2860v2");
+#endif
+
 	luaL_newmetatable(L, IWINFO_WEXT_META);
 	luaL_register(L, NULL, R_common);
 	luaL_register(L, NULL, R_wext);
diff -ruN a/iwinfo_rt2860v2.c b/iwinfo_rt2860v2.c
--- a/iwinfo_rt2860v2.c	1970-01-01 08:00:00.000000000 +0800
+++ b/iwinfo_rt2860v2.c	2015-01-24 15:18:48.099843767 +0800
@@ -0,0 +1,626 @@
+/*
+ * iwinfo - Wireless Information Library - RT2860v2 Backend (Based on WEXT Backend)
+ *
+ *   Copyright (C) 2009 Jo-Philipp Wich <xm@subsignal.org>
+ *   Copyright (C) 2015 GuoGuo <gch981213@gmail.com>
+ *
+ * The iwinfo library is free software: you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ *
+ * The iwinfo library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with the iwinfo library. If not, see http://www.gnu.org/licenses/.
+ *
+ * Parts of this code are derived from the Linux wireless tools, iwlib.c,
+ * iwlist.c and iwconfig.c in particular.
+ */
+
+#include "iwinfo.h"
+#include "iwinfo_wext.h"
+#include "api/mtk.h"
+
+char data[4096];
+
+#define MYLOG() \
+	{   char buf[256];  \
+	sprintf(buf, "echo %s:%d >> /my.txt", __FUNCTION__, __LINE__);     \
+	system(buf);	\
+}
+
+static double rt2860v2_freq2float(const struct iw_freq *in)
+{
+	int		i;
+	double	res = (double) in->m;
+	for(i = 0; i < in->e; i++) res *= 10;
+	return res;
+}
+
+static inline int rt2860v2_freq2mhz(const struct iw_freq *in)
+{
+	int i;
+
+	if( in->e == 6 )
+	{
+		return in->m;
+	}
+	else
+	{
+		return (int)(rt2860v2_freq2float(in) / 1000000);
+	}
+}
+
+static inline int rt2860v2_ioctl(const char *ifname, int cmd, struct iwreq *wrq)
+{
+	if( !strncmp(ifname, "mon.", 4) )
+		strncpy(wrq->ifr_name, &ifname[4], IFNAMSIZ);
+	else
+		strncpy(wrq->ifr_name, ifname, IFNAMSIZ);
+
+	return iwinfo_ioctl(cmd, wrq);
+}
+
+
+static int rt2860v2_probe(const char *ifname)
+{
+	struct iwreq wrq;
+	char buf[256];
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWNAME, &wrq) >= 0)
+	{
+		return (strncmp(wrq.u.name,"RT2860v2_AP",11)==0);
+	}
+	return 0;
+}
+
+static void rt2860v2_close(void)
+{
+	/* Nop */
+}
+
+static int rt2860v2_get_mode(const char *ifname, int *buf)
+{
+	*buf = IWINFO_OPMODE_MASTER;
+	return 0;
+}
+
+static int rt2860v2_get_ssid(const char *ifname, char *buf)
+{
+	struct iwreq wrq;
+
+	wrq.u.essid.pointer = (caddr_t) buf;
+	wrq.u.essid.length  = IW_ESSID_MAX_SIZE + 1;
+	wrq.u.essid.flags   = 0;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWESSID, &wrq) >= 0)
+		return 0;
+
+	return -1;
+}
+
+static int rt2860v2_get_bssid(const char *ifname, char *buf)
+{
+	struct iwreq wrq;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWAP, &wrq) >= 0)
+	{
+		sprintf(buf, "%02X:%02X:%02X:%02X:%02X:%02X",
+			(uint8_t)wrq.u.ap_addr.sa_data[0], (uint8_t)wrq.u.ap_addr.sa_data[1],
+			(uint8_t)wrq.u.ap_addr.sa_data[2], (uint8_t)wrq.u.ap_addr.sa_data[3],
+			(uint8_t)wrq.u.ap_addr.sa_data[4], (uint8_t)wrq.u.ap_addr.sa_data[5]);
+
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_bitrate(const char *ifname, int *buf)
+{
+	struct iwreq wrq;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWRATE, &wrq) >= 0)
+	{
+		*buf = (wrq.u.bitrate.value / 1000);
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_channel(const char *ifname, int *buf)
+{
+	struct iwreq wrq;
+	struct iw_range range;
+	double freq;
+	int i;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWFREQ, &wrq) >= 0)
+	{
+		if( wrq.u.freq.m >= 1000 )
+		{
+			freq = rt2860v2_freq2float(&wrq.u.freq);
+			wrq.u.data.pointer = (caddr_t) &range;
+			wrq.u.data.length  = sizeof(struct iw_range);
+			wrq.u.data.flags   = 0;
+
+			if(rt2860v2_ioctl(ifname, SIOCGIWRANGE, &wrq) >= 0)
+			{
+				for(i = 0; i < range.num_frequency; i++)
+				{
+					if( rt2860v2_freq2float(&range.freq[i]) == freq )
+					{
+						*buf = range.freq[i].i;
+						return 0;
+					}
+				}
+			}
+		}
+		else
+		{
+			*buf = wrq.u.freq.m;
+			return 0;
+		}
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_frequency(const char *ifname, int *buf)
+{
+	struct iwreq wrq;
+	struct iw_range range;
+	int i, channel;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWFREQ, &wrq) >= 0)
+	{
+		/* We got a channel number instead ... */
+		if( wrq.u.freq.m < 1000 )
+		{
+			channel = wrq.u.freq.m;
+			wrq.u.data.pointer = (caddr_t) &range;
+			wrq.u.data.length  = sizeof(struct iw_range);
+			wrq.u.data.flags   = 0;
+
+			if(rt2860v2_ioctl(ifname, SIOCGIWRANGE, &wrq) >= 0)
+			{
+				for(i = 0; i < range.num_frequency; i++)
+				{
+					if( range.freq[i].i == channel )
+					{
+						*buf = rt2860v2_freq2mhz(&range.freq[i]);
+						return 0;
+					}
+				}
+			}
+		}
+		else
+		{
+			*buf = rt2860v2_freq2mhz(&wrq.u.freq);
+			return 0;
+		}
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_txpower(const char *ifname, int *buf)
+{
+	struct iwreq wrq;
+
+	wrq.u.txpower.flags = 0;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWTXPOW, &wrq) >= 0)
+	{
+		if(wrq.u.txpower.flags & IW_TXPOW_MWATT)
+			*buf = iwinfo_mw2dbm(wrq.u.txpower.value);
+		else
+			*buf = wrq.u.txpower.value;
+
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_signal(const char *ifname, int *buf)
+{
+	struct iwreq wrq;
+	struct iw_statistics stats;
+
+	wrq.u.data.pointer = (caddr_t) &stats;
+	wrq.u.data.length  = sizeof(struct iw_statistics);
+	wrq.u.data.flags   = 1;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWSTATS, &wrq) >= 0)
+	{
+		*buf = (stats.qual.updated & IW_QUAL_DBM)
+			? (stats.qual.level - 0x100) : stats.qual.level;
+
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_noise(const char *ifname, int *buf)
+{
+	struct iwreq wrq;
+	struct iw_statistics stats;
+
+	wrq.u.data.pointer = (caddr_t) &stats;
+	wrq.u.data.length  = sizeof(struct iw_statistics);
+	wrq.u.data.flags   = 1;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWSTATS, &wrq) >= 0)
+	{
+		*buf = (stats.qual.updated & IW_QUAL_DBM)
+			? (stats.qual.noise - 0x100) : stats.qual.noise;
+
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_quality(const char *ifname, int *buf)
+{
+	struct iwreq wrq;
+	struct iw_statistics stats;
+
+	wrq.u.data.pointer = (caddr_t) &stats;
+	wrq.u.data.length  = sizeof(struct iw_statistics);
+	wrq.u.data.flags   = 1;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWSTATS, &wrq) >= 0)
+	{
+		*buf = stats.qual.qual;
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_quality_max(const char *ifname, int *buf)
+{
+	struct iwreq wrq;
+	struct iw_range range;
+
+	wrq.u.data.pointer = (caddr_t) &range;
+	wrq.u.data.length  = sizeof(struct iw_range);
+	wrq.u.data.flags   = 0;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWRANGE, &wrq) >= 0)
+	{
+		*buf = range.max_qual.qual;
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_assoclist(const char *ifname, char *buf, int *len)
+{
+	int	socket_id;
+	struct	iwreq wrq;
+	int ret;
+	struct iwinfo_assoclist_entry entry;
+
+	memset(data, 0x0, 4096);
+	strcpy(data, "");
+	strcpy(wrq.ifr_name, ifname);
+	wrq.u.data.length = 4096;
+	wrq.u.data.pointer = data;
+	wrq.u.data.flags = 0;
+
+	socket_id = socket(AF_INET, SOCK_DGRAM, 0);
+	if (socket_id < 0) {
+		printf("\n%s rtuser::error::Open socket error!\n\n", __FUNCTION__);
+		return -1;
+	}
+
+	ret = ioctl(socket_id, RTPRIV_IOCTL_GET_MAC_TABLE, &wrq);
+	if (ret !=0 ) {
+		printf("\n%s rtuser::error::get mac table!\n\n", __FUNCTION__);
+		close(socket_id);
+		return -1;
+	}
+
+	{
+		RT_802_11_MAC_TABLE	*mp;
+		int			i, j;
+
+		mp = (RT_802_11_MAC_TABLE *)wrq.u.data.pointer;
+		for(i=0, j=0; i < mp->Num; i++, j += sizeof(struct iwinfo_assoclist_entry)) {
+			memset(&entry, 0, sizeof(entry));
+			memcpy(entry.mac, mp->Entry[i].Addr, MAC_ADDR_LENGTH);
+			entry.signal = (mp->Entry[i].AvgRssi0 + mp->Entry[i].AvgRssi1)/2;
+//			entry.tx_rate.rate = mp->Entry[i].TxRate.word;
+//			entry.tx_rate.mcs = -1;
+			entry.tx_rate.mcs = mp->Entry[i].TxRate.field.MCS;
+			entry.tx_rate.is_40mhz = mp->Entry[i].TxRate.field.BW;
+			entry.tx_rate.is_short_gi = mp->Entry[i].TxRate.field.ShortGI;
+			
+			memcpy(&buf[j], &entry, sizeof(entry));
+		}
+		*len = j;
+	}
+	close(socket_id);
+	return 0;
+}
+
+static int rt2860v2_get_txpwrlist(const char *ifname, char *buf, int *len)
+{
+	struct iwreq wrq;
+	struct iw_range range;
+	struct iwinfo_txpwrlist_entry entry;
+	int i;
+
+	wrq.u.data.pointer = (caddr_t) &range;
+	wrq.u.data.length  = sizeof(struct iw_range);
+	wrq.u.data.flags   = 0;
+
+	if( (rt2860v2_ioctl(ifname, SIOCGIWRANGE, &wrq) >= 0) &&
+	    (range.num_txpower > 0) && (range.num_txpower <= IW_MAX_TXPOWER) &&
+	    !(range.txpower_capa & IW_TXPOW_RELATIVE)
+	) {
+		for( i = 0; i < range.num_txpower; i++ )
+		{
+			if( range.txpower_capa & IW_TXPOW_MWATT )
+			{
+				entry.dbm = iwinfo_mw2dbm(range.txpower[i]);
+				entry.mw  = range.txpower[i];
+			}
+
+			/* Madwifi does neither set mW not dBm caps, also iwlist assumes
+			 * dBm if mW is not set, so don't check here... */
+			else /* if( range.txpower_capa & IW_TXPOW_DBM ) */
+			{
+				entry.dbm = range.txpower[i];
+				entry.mw  = iwinfo_dbm2mw(range.txpower[i]);
+			}
+
+			memcpy(&buf[i*sizeof(entry)], &entry, sizeof(entry));
+		}
+
+		*len = i * sizeof(entry);
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_freqlist(const char *ifname, char *buf, int *len)
+{
+	struct iwreq wrq;
+	struct iw_range range;
+	struct iwinfo_freqlist_entry entry;
+	int i, bl;
+
+	wrq.u.data.pointer = (caddr_t) &range;
+	wrq.u.data.length  = sizeof(struct iw_range);
+	wrq.u.data.flags   = 0;
+
+	if(rt2860v2_ioctl(ifname, SIOCGIWRANGE, &wrq) >= 0)
+	{
+		bl = 0;
+
+		for(i = 0; i < range.num_frequency; i++)
+		{
+			entry.mhz        = rt2860v2_freq2mhz(&range.freq[i]);
+			entry.channel    = range.freq[i].i;
+			entry.restricted = 0;
+
+			memcpy(&buf[bl], &entry, sizeof(struct iwinfo_freqlist_entry));
+			bl += sizeof(struct iwinfo_freqlist_entry);
+		}
+
+		*len = bl;
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_country(const char *ifname, char *buf)
+{
+	sprintf(buf, "00");
+	return 0;
+}
+
+static int rt2860v2_get_countrylist(const char *ifname, char *buf, int *len)
+{
+	/* Stub */
+	return -1;
+}
+
+static int rt2860v2_get_hwmodelist(const char *ifname, int *buf)
+{
+	char chans[IWINFO_BUFSIZE] = { 0 };
+	struct iwinfo_freqlist_entry *e = NULL;
+	int len = 0;
+
+	*buf = 0;
+
+	if( !rt2860v2_get_freqlist(ifname, chans, &len) )
+	{
+		for( e = (struct iwinfo_freqlist_entry *)chans; e->channel; e++ )
+		{
+			if( e->channel <= 14 )
+			{
+				*buf |= IWINFO_80211_B;
+				*buf |= IWINFO_80211_G;
+				*buf |= IWINFO_80211_N;
+			}
+			else
+			{
+				*buf |= IWINFO_80211_A;
+			}
+		}
+
+		return 0;
+	}
+
+	return -1;
+}
+
+static int rt2860v2_get_encryption(const char *ifname, char *buf)
+{
+	/* No reliable crypto info in wext */
+	return -1;
+}
+
+static int rt2860v2_get_phyname(const char *ifname, char *buf)
+{
+	/* No suitable api in wext */
+	strcpy(buf, ifname);
+	return 0;
+}
+
+static int rt2860v2_get_mbssid_support(const char *ifname, int *buf)
+{
+	/* Support mbssid(Should be Enabled in driver.) */
+	return 0;
+}
+
+static char * rt2860v2_sysfs_ifname_file(const char *ifname, const char *path)
+{
+	FILE *f;
+	static char buf[128];
+	char *rv = NULL;
+
+	snprintf(buf, sizeof(buf), "/sys/class/net/%s/%s", ifname, path);
+
+	if ((f = fopen(buf, "r")) != NULL)
+	{
+		memset(buf, 0, sizeof(buf));
+
+		if (fread(buf, 1, sizeof(buf), f))
+			rv = buf;
+
+		fclose(f);
+	}
+
+	return rv;
+}
+
+static int rt2860v2_get_hardware_id(const char *ifname, char *buf)
+{
+	char *data;
+	struct iwinfo_hardware_id *id = (struct iwinfo_hardware_id *)buf;
+
+	memset(id, 0, sizeof(struct iwinfo_hardware_id));
+
+	data = rt2860v2_sysfs_ifname_file(ifname, "device/vendor");
+	if (data)
+		id->vendor_id = strtoul(data, NULL, 16);
+
+	data = rt2860v2_sysfs_ifname_file(ifname, "device/device");
+	if (data)
+		id->device_id = strtoul(data, NULL, 16);
+
+	data = rt2860v2_sysfs_ifname_file(ifname, "device/subsystem_device");
+	if (data)
+		id->subsystem_device_id = strtoul(data, NULL, 16);
+
+	data = rt2860v2_sysfs_ifname_file(ifname, "device/subsystem_vendor");
+	if (data)
+		id->subsystem_vendor_id = strtoul(data, NULL, 16);
+
+	return (id->vendor_id > 0 && id->device_id > 0) ? 0 : -1;
+}
+
+static int rt2860v2_get_hardware_name(const char *ifname, char *buf)
+{
+	sprintf(buf, "Ralink/MediaTek RT2860v2");
+	return 0;
+}
+
+static int rt2860v2_get_txpower_offset(const char *ifname, int *buf)
+{
+	/* Stub */
+	*buf = 0;
+	return -1;
+}
+
+static int rt2860v2_get_frequency_offset(const char *ifname, int *buf)
+{
+	/* Stub */
+	*buf = 0;
+	return -1;
+}
+
+int rt2860v2_get_scanlist(const char *ifname, char *buf, int *len)
+{
+	char cmd[256];
+	char tempchar[256];
+	int i;
+    int entrylen=0;
+	struct iwinfo_scanlist_entry tempscanlist;
+	sprintf(cmd, "iwpriv %s set SiteSurvey=0", ifname);
+	system(cmd);
+	sprintf(cmd, "iwpriv %s get_site_survey", ifname);
+	FILE *fp = popen(cmd, "r");
+	for(i=0;i<11;i++)
+		fscanf(fp, "%s", tempchar);
+	while(fscanf(fp, "%d%s%2hhx:%2hhx:%2hhx:%2hhx:%2hhx:%2hhx%s%d%s%s%s%s",
+              &tempscanlist.channel,
+              &tempscanlist.ssid,
+              &tempscanlist.mac[0],
+              &tempscanlist.mac[1],
+              &tempscanlist.mac[2],
+              &tempscanlist.mac[3],
+              &tempscanlist.mac[4],
+              &tempscanlist.mac[5],
+              &tempchar,
+              &tempscanlist.signal,
+              &tempchar,
+              &tempchar,
+              &tempchar,
+              &tempchar
+             )==14
+      )
+    {
+        memcpy(&buf[entrylen], &tempscanlist, sizeof(struct iwinfo_scanlist_entry));
+		entrylen += sizeof(struct iwinfo_scanlist_entry);
+        memset(&tempscanlist, 0, sizeof(struct iwinfo_scanlist_entry));
+    }
+    *len = entrylen;
+	pclose(fp);
+	return 0;
+}
+
+const struct iwinfo_ops rt2860v2_ops = {
+	.name             = "rt2860v2",
+	.probe            = rt2860v2_probe,
+	.channel          = rt2860v2_get_channel,
+	.frequency        = rt2860v2_get_frequency,
+	.frequency_offset = rt2860v2_get_frequency_offset,
+	.txpower          = rt2860v2_get_txpower,
+	.txpower_offset   = rt2860v2_get_txpower_offset,
+	.bitrate          = rt2860v2_get_bitrate,
+	.signal           = rt2860v2_get_signal,
+	.noise            = rt2860v2_get_noise,
+	.quality          = rt2860v2_get_quality,
+	.quality_max      = rt2860v2_get_quality_max,
+	.mbssid_support   = rt2860v2_get_mbssid_support,
+	.hwmodelist       = rt2860v2_get_hwmodelist,
+	.mode             = rt2860v2_get_mode,
+	.ssid             = rt2860v2_get_ssid,
+	.bssid            = rt2860v2_get_bssid,
+	.country          = rt2860v2_get_country,
+	.hardware_id      = rt2860v2_get_hardware_id,
+	.hardware_name    = rt2860v2_get_hardware_name,
+	.encryption       = rt2860v2_get_encryption,
+	.phyname          = rt2860v2_get_phyname,
+	.assoclist        = rt2860v2_get_assoclist,
+	.txpwrlist        = rt2860v2_get_txpwrlist,
+	.scanlist         = rt2860v2_get_scanlist,
+	.freqlist         = rt2860v2_get_freqlist,
+	.countrylist      = rt2860v2_get_countrylist,
+	.close            = rt2860v2_close
+};
diff -ruN a/Makefile b/Makefile
--- a/Makefile	2015-01-11 11:53:32.000000000 +0800
+++ b/Makefile	2015-01-23 13:26:00.880773833 +0800
@@ -32,6 +32,11 @@
 	IWINFO_LIB_OBJ     += iwinfo_nl80211.o
 endif
 
+ifneq ($(filter rt2860v2,$(IWINFO_BACKENDS)),)
+	IWINFO_CFLAGS  += -DUSE_RT2860V2
+	IWINFO_LIB_OBJ += iwinfo_rt2860v2.o
+endif
+
 
 %.o: %.c
 	$(CC) $(IWINFO_CFLAGS) $(FPIC) -c -o $@ $<
